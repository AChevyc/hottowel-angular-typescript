{"version":3,"sources":["client/app/blocks/exception/exception-handler.provider.ts"],"names":["blocks","blocks.exception","blocks.exception.ExceptionHandlerProvider","blocks.exception.ExceptionHandlerProvider.constructor","blocks.exception.ExceptionHandlerProvider.configure","blocks.exception.config","blocks.exception.extendExceptionHandler"],"mappings":"AAAA,kEAAkE;AAClE,6EAA6E;AAC7E,wDAAwD;AAExD,IAAO,MAAM,CA0DZ;AA1DD,WAAO,MAAM;IAACA,IAAAA,SAASA,CA0DtBA;IA1DaA,WAAAA,UAASA,EAACA,CAACA;QACrBC,YAAYA,CAACA;QAKbA,IAAaA,wBAAwBA;YAEjCC,SAFSA,wBAAwBA;gBAArCC,iBAWCA;gBARGA,WAAMA,GAA4BA;oBAC9BA,cAAcA,EAAEA,SAASA;iBAC5BA,CAAAA;gBAKDA,SAAIA,GAA8CA;oBAAQA,MAAMA,CAACA,EAAEA,MAAMA,EAAEA,KAAIA,CAACA,MAAMA,EAAEA,CAACA;gBAACA,CAACA,CAAAA;YAR3EA,CAACA;YAKjBD,4CAASA,GAATA,UAAUA,cAAmBA;gBACzBE,IAAIA,CAACA,MAAMA,CAACA,cAAcA,GAAGA,cAAcA,CAACA;YAChDA,CAACA;YARMF,gCAAOA,GAAkBA,EAAEA,CAACA;YAUvCA,+BAACA;QAADA,CAXAD,AAWCC,IAAAD;QAXYA,mCAAwBA,GAAxBA,wBAWZA,CAAAA;QAEDA,MAAMA,CAACA,OAAOA,GAAGA,CAACA,UAAUA,CAACA,CAACA;QAC9BA,SAASA,MAAMA,CAACA,QAAiCA;YAC7CI,QAAQA,CAACA,SAASA,CAACA,mBAAmBA,EAAEA,sBAAsBA,CAACA,CAACA;QACpEA,CAACA;QAEDJ,sBAAsBA,CAACA,OAAOA,GAAGA,CAACA,WAAWA,EAAEA,kBAAkBA,EAAEA,QAAQA,CAACA,CAACA;QAC7EA,AAOAA;;;;;;WADGA;iBACMA,sBAAsBA,CAACA,SAAsCA,EAClEA,gBAAqBA,EACrBA,MAA4BA;YAC5BK,MAAMA,CAACA,UAAUA,SAAcA,EAAEA,KAAUA;gBACnD,AACY,8CADkC;oBAC9B,cAAc,GAAG,gBAAgB,CAAC,MAAM,CAAC,cAAc,IAAI,EAAE,CAAC;gBAClE,IAAI,SAAS,GAAG,EAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAC,CAAC;gBACrD,SAAS,CAAC,OAAO,GAAG,cAAc,GAAG,SAAS,CAAC,OAAO,CAAC;gBACvD,SAAS,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;gBAC5B,AASA;;;;;;;;mBADG;gBACH,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAC/C,CAAC,CAACA;QACNA,CAACA;QAEDL,OAAOA,CACFA,MAAMA,CAACA,kBAAkBA,CAACA,CAC1BA,QAAQA,CAACA,kBAAkBA,EAAEA,wBAAwBA,CAACA,CACtDA,MAAMA,CAACA,MAAMA,CAACA,CAACA;IACxBA,CAACA,EA1DaD,SAASA,GAATA,gBAASA,KAATA,gBAASA,QA0DtBA;AAADA,CAACA,EA1DM,MAAM,KAAN,MAAM,QA0DZ","file":"client/app/blocks/exception/exception-handler.provider.js","sourceRoot":"/Users/john/_git/angular-typescript-hottowel-demo/","sourcesContent":["// Include in index.html so that app level exceptions are handled.\n// Exclude from testRunner.html which should run exactly what it wants to run\n/// <reference path=\"../../../../../typings/tsd.d.ts\" />\n\nmodule blocks.exception {\n    'use strict';\n\n    export interface IExceptionHandlerConfig {\n        appErrorPrefix: string\n    }\n    export class ExceptionHandlerProvider {\n        static $inject: Array<string> = [];\n        constructor() { }\n        config: IExceptionHandlerConfig = {\n            appErrorPrefix: undefined\n        }\n\n        configure(appErrorPrefix: any) {\n            this.config.appErrorPrefix = appErrorPrefix;\n        }\n        $get: () => { config: IExceptionHandlerConfig } = () => { return { config: this.config }; }\n    }\n\n    config.$inject = ['$provide'];\n    function config($provide: ng.auto.IProvideService) {\n        $provide.decorator('$exceptionHandler', extendExceptionHandler);\n    }\n\n    extendExceptionHandler.$inject = ['$delegate', 'exceptionHandler', 'logger'];\n    /**\n     * Extend the $exceptionHandler service to also display a toast.\n     * @param  {Object} $delegate\n     * @param  {Object} exceptionHandler\n     * @param  {Object} logger\n     * @return {Function} the decorated $exceptionHandler service\n     */\n    function extendExceptionHandler($delegate: ng.IExceptionHandlerService,\n        exceptionHandler: any ,\n        logger: blocks.logger.Logger) {\n        return function (exception: any, cause: any) {\n//            var appErrorPrefix = '[Error] ';\n            var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';\n            var errorData = {exception: exception, cause: cause};\n            exception.message = appErrorPrefix + exception.message;\n            $delegate(exception, cause);\n            /**\n             * Could add the error to a service's collection,\n             * add errors to $rootScope, log errors to remote web server,\n             * or log locally. Or throw hard. It is entirely up to you.\n             * throw exception;\n             *\n             * @example\n             *     throw { message: 'error message we added' };\n             */\n            logger.error(exception.message, errorData);\n        };\n    }\n\n    angular\n        .module('blocks.exception')\n        .provider('exceptionHandler', ExceptionHandlerProvider)\n        .config(config);\n}\n"]}